import pickle
from abc import ABC, abstractmethod
from typing import TypeAlias

from spectrumapp_loader.dumps import BinaryDump, Dump
from spectrumapp_loader.parsers import BinaryParser, Parser
from spectrumapp_loader.types import FilePath


class AbstractLoader(ABC):

    def __init__(self, parser: type[Parser]):
        self.parser = parser

    @abstractmethod
    def load(self, filepath: FilePath, verbose: bool = False) -> Dump:
        raise NotImplementedError


class BinaryLoader(AbstractLoader):
    """Loader for Atoms's binary dump files generated by [ExternalDumper.exe](https://github.com/Exinker/external-dumper)."""

    def __init__(self, parser: type[BinaryParser]):
        super().__init__(parser=parser)

    def load(self, filepath: FilePath, verbose: bool = False) -> BinaryDump:
        assert filepath.endswith('.pkl'), '`BinaryLoader` supports only .pkl files!'

        with open(filepath, 'rb') as file:
            data = pickle.load(file)

        return BinaryDump.factory(
            parser=self.parser,
        ).create(
            data=data,
            verbose=verbose,
        )


Loader: TypeAlias = BinaryLoader
